from unittest.mock import patch, MagicMock
import unittest
from lxml import etree

from kpsv2_client.service import KpsService, KpsException


class TestKpsService(unittest.TestCase):
    def setUp(self):
        self.kps_service = KpsService()

    def test_set_auth(self):
        self.kps_service.set_auth("username", "password")
        self.assertEqual(self.kps_service._username, "username")
        self.assertEqual(self.kps_service._password, "password")

    def test_check_auth_without_auth(self):
        with self.assertRaises(KpsException):
            self.kps_service._check_auth()

    def test_check_auth_with_auth(self):
        self.kps_service.set_auth("username", "password")
        try:
            self.kps_service._check_auth()
        except KpsException:
            self.fail("_check_auth() raised KpsException unexpectedly!")

    @patch('kpsv2_client.service.requests.post')
    def test_bilesik_kutuk_sorgula(self, mock_post):
        mock_response = MagicMock()
        mock_response.content.decode.return_value = '<s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://www.w3.org/2005/08/addressing" xmlns:u="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"><s:Header><a:Action s:mustUnderstand="1">http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal</a:Action><a:RelatesTo>urn:uuid:9d780aca-77e6-47b1-acf6-4c7c4d94bb25</a:RelatesTo><o:Security s:mustUnderstand="1" xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"><u:Timestamp u:Id="_0"><u:Created>2024-05-30T10:03:54.109Z</u:Created><u:Expires>2024-05-30T10:08:54.109Z</u:Expires></u:Timestamp></o:Security></s:Header><s:Body><trust:RequestSecurityTokenResponseCollection xmlns:trust="http://docs.oasis-open.org/ws-sx/ws-trust/200512"><trust:RequestSecurityTokenResponse><trust:KeySize>256</trust:KeySize><trust:Lifetime><wsu:Created xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">2024-05-30T10:03:54.109Z</wsu:Created><wsu:Expires xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">2024-05-30T11:03:54.109Z</wsu:Expires></trust:Lifetime><wsp:AppliesTo xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"><a:EndpointReference><a:Address>https://kpsv2test.nvi.gov.tr/Services/RoutingService.svc</a:Address></a:EndpointReference></wsp:AppliesTo><trust:RequestedSecurityToken><xenc:EncryptedData Type="http://www.w3.org/2001/04/xmlenc#Element" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"><xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc"/><KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"><e:EncryptedKey xmlns:e="http://www.w3.org/2001/04/xmlenc#"><e:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/></e:EncryptionMethod><KeyInfo><o:SecurityTokenReference xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"><X509Data><X509IssuerSerial><X509IssuerName>CN=MERNISSUBCA02, DC=mernis, DC=intra</X509IssuerName><X509SerialNumber>535217885312034837035320232220865626495778921</X509SerialNumber></X509IssuerSerial></X509Data></o:SecurityTokenReference></KeyInfo><e:CipherData><e:CipherValue>eZ0iiH9TK5bEjKd1I5y11dC3kZl/uILeYfWCB/UMcN1CWtmB0NWcCrZjGcGS3w9+UeQz5sIX2T6d/h5gjwewdQdYSwTSqUDQfjTP9trXi9skHgHMwVJgd+qdrnkQBQ/oILMuNhznerOTM5OtZcaj1GYUHtci4ofUjWEm4sYxX4XD6ErWwMs+t06lXFeZuBBCQ/RyKLhX6w68QSadoHlpSPUjW2AQByAsJ5jPJ3RkatJgfaFLA8sM/qtcODbm2L9wXYw/kBOkdYy3+JQT3mvaejoASwSE07wRz7Pgh8MZYEHWTX0JJfz71vcMfSt6VYJmxE8J2hzmsdtKB91pw/Xjig==</e:CipherValue></e:CipherData></e:EncryptedKey></KeyInfo><xenc:CipherData><xenc:CipherValue></xenc:CipherValue></xenc:CipherData></xenc:EncryptedData></trust:RequestedSecurityToken><trust:RequestedProofToken><trust:BinarySecret>oxD2EEeIaei5ydlKUjacBumUcief1cqN1BdyGSmN+2o=</trust:BinarySecret></trust:RequestedProofToken><trust:RequestedAttachedReference><o:SecurityTokenReference k:TokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1" xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:k="http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd"><o:KeyIdentifier ValueType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0#SAMLAssertionID">_99c8ea68-d169-412a-9d83-0c882a6eaf63</o:KeyIdentifier></o:SecurityTokenReference></trust:RequestedAttachedReference><trust:RequestedUnattachedReference><o:SecurityTokenReference k:TokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1" xmlns:o="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:k="http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd"><o:KeyIdentifier ValueType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0#SAMLAssertionID">_99c8ea68-d169-412a-9d83-0c882a6eaf63</o:KeyIdentifier></o:SecurityTokenReference></trust:RequestedUnattachedReference><trust:TokenType>urn:oasis:names:tc:SAML:1.0:assertion</trust:TokenType><trust:RequestType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue</trust:RequestType><trust:KeyType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey</trust:KeyType></trust:RequestSecurityTokenResponse></trust:RequestSecurityTokenResponseCollection></s:Body></s:Envelope>'
        soap_response = etree.fromstring(mock_response.content.decode.return_value.encode('utf-8'))

        envelope = soap_response.find('{http://www.w3.org/2003/05/soap-envelope}Body')
        body = envelope.getchildren()[0]

        namespaces = {
            'trust': 'http://docs.oasis-open.org/ws-sx/ws-trust/200512',
            'wsu': 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'
        }

        key_size = int(body.find('.//trust:KeySize', namespaces).text)

        created_time = body.find('.//wsu:Created', namespaces).text
        expires_time = body.find('.//wsu:Expires', namespaces).text

        self.assertEqual(key_size, 256)
        self.assertEqual(created_time, '2024-05-30T10:03:54.109Z')
        self.assertEqual(expires_time, '2024-05-30T11:03:54.109Z')

if __name__ == '__main__':
    unittest.main()
